
$ grep "password" . -r
./app/admin/bbq/comment/configs/mysql.toml:     dsn = "{user}:{password}@tcp(127.0.0.1:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8"
./app/admin/bbq/comment/configs/mysql.toml:     readDSN = ["{user}:{password}@tcp(127.0.0.2:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8","{user}:{password}@tcp(127.0.0.3:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8,utf8mb4"]
./app/admin/ep/marthe/cmd/admin.toml:password = ""
./app/admin/ep/marthe/cmd/convey-test.toml:password = ""
./app/admin/ep/marthe/dao/tapd.go:      _password    = "0989D4F0-AF9D-949F-C950-E22A3F891NIK"
./app/admin/ep/marthe/dao/tapd.go:      req.SetBasicAuth(_userName, _password)
./app/admin/ep/melloi/CHANGELOG.md:1.remove mail password
./app/admin/ep/melloi/cmd/convey-test.toml:    password = "TestEP20180624"
./app/admin/ep/melloi/cmd/melloi-test.toml:    password = "*******"
./app/admin/ep/merlin/cmd/convey-test.toml:password = ""
./app/admin/ep/merlin/cmd/merlin-test.toml:password = ""
./app/admin/ep/merlin/cmd/merlin-test.toml:password = "Quality1#"
./app/admin/ep/tapd/cmd/admin.toml:password = ""
./app/admin/main/apm/http/apply_test.go:                params.Set("password", "admin")
./app/admin/main/apm/http/apply_test.go:                params.Set("password", "a")
./app/admin/main/apm/http/canal_test.go:                params.Set("password", "admin")
./app/admin/main/apm/model/canal/apply.go:      Password        string        `json:"password" toml:"password"`
./app/admin/main/apm/model/canal/apply.go:      Password      string `form:"password"`
./app/admin/main/apm/model/canal/canal.go:              Password      string `json:"password" toml:"password"`
./app/admin/main/apm/service/canal.go:  params.Set("password", v.Password)
./app/admin/main/search/http/mng_v2.go:         Password string `form:"password" validate:"required"`
./app/admin/main/search/http/mng_v2.go:         Password    string `form:"password" validate:"required"`
./app/admin/main/search/service/mng_v2.go:func (s *Service) AssetDBConnect(c context.Context, host, port, user, password string) (dbNames []string, err error) {
./app/admin/main/search/service/mng_v2.go:      db, err := sql.Open("mysql", fmt.Sprintf("%s:%s@tcp(%s:%s)/?charset=utf8mb4,utf8", user, password, host, port))
./app/admin/main/search/service/mng_v2.go:func (s *Service) AssetDBAdd(c context.Context, name, description, host, port, user, password string) (id int64, err error) {
./app/admin/main/search/service/mng_v2.go:      dbnames, err := s.AssetDBConnect(c, host, port, user, password)
./app/admin/main/search/service/mng_v2.go:      dsn := fmt.Sprintf(model.DBDsnFormat, user, password, host, port, name)
./app/admin/main/search/service/mng_v2_test.go:         password = "test"
./app/admin/main/search/service/mng_v2_test.go:         res, err := svr.AssetDBConnect(c, host, port, user, password)
./app/admin/main/search/service/mng_v2_test.go:         password    = "test"
./app/admin/main/search/service/mng_v2_test.go:         res, err := svr.AssetDBAdd(c, name, description, host, port, user, password)
./app/admin/main/up/cmd/up-admin.toml:    password = "2333"
./app/infra/canal/conf/conf.go: Password string        `toml:"password"`
./app/infra/canal/http/canal.go:                Password string `form:"password" validate:"required"`
./app/interface/bbq/comment/configs/mysql.toml: dsn = "{user}:{password}@tcp(127.0.0.1:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8"
./app/interface/bbq/comment/configs/mysql.toml: readDSN = ["{user}:{password}@tcp(127.0.0.2:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8","{user}:{password}@tcp(127.0.0.3:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8,utf8mb4"]
./app/interface/bbq/feed/configs/mysql.toml:    dsn = "{user}:{password}@tcp(127.0.0.1:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8"
./app/interface/bbq/feed/configs/mysql.toml:    readDSN = ["{user}:{password}@tcp(127.0.0.2:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8","{user}:{password}@tcp(127.0.0.3:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8,utf8mb4"]
./app/interface/bbq/notice/configs/mysql.toml:  dsn = "{user}:{password}@tcp(127.0.0.1:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8"
./app/interface/bbq/notice/configs/mysql.toml:  readDSN = ["{user}:{password}@tcp(127.0.0.2:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8","{user}:{password}@tcp(127.0.0.3:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8,utf8mb4"]
./app/interface/bbq/search/configs/mysql.toml:  dsn = "{user}:{password}@tcp(127.0.0.1:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8"
./app/interface/bbq/search/configs/mysql.toml:  readDSN = ["{user}:{password}@tcp(127.0.0.2:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8","{user}:{password}@tcp(127.0.0.3:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8,utf8mb4"]
./app/interface/bbq/topic/configs/mysql.toml:   dsn = "{user}:{password}@tcp(127.0.0.1:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8"
./app/interface/bbq/topic/configs/mysql.toml:   readDSN = ["{user}:{password}@tcp(127.0.0.2:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8","{user}:{password}@tcp(127.0.0.3:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8,utf8mb4"]
./app/interface/bbq/user/configs/mysql.toml:    dsn = "{user}:{password}@tcp(127.0.0.1:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8"
./app/interface/bbq/user/configs/mysql.toml:    readDSN = ["{user}:{password}@tcp(127.0.0.2:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8","{user}:{password}@tcp(127.0.0.3:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8,utf8mb4"]
./app/interface/bbq/video/configs/mysql.toml:   dsn = "{user}:{password}@tcp(127.0.0.1:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8"
./app/interface/bbq/video/configs/mysql.toml:   readDSN = ["{user}:{password}@tcp(127.0.0.2:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8","{user}:{password}@tcp(127.0.0.3:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8,utf8mb4"]
./app/interface/live/open-interface/configs/mysql.toml: dsn = "{user}:{password}@tcp(127.0.0.1:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8"
./app/interface/live/open-interface/configs/mysql.toml: readDSN = ["{user}:{password}@tcp(127.0.0.2:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8","{user}:{password}@tcp(127.0.0.3:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8,utf8mb4"]
./app/interface/main/laser/cmd/laser-interface.toml:     password = "233"
./app/job/bbq/cms/configs/mysql.toml:   dsn = "{user}:{password}@tcp(127.0.0.1:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8"
./app/job/bbq/cms/configs/mysql.toml:   readDSN = ["{user}:{password}@tcp(127.0.0.2:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8","{user}:{password}@tcp(127.0.0.3:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8,utf8mb4"]
./app/job/bbq/comment/configs/mysql.toml:       dsn = "{user}:{password}@tcp(127.0.0.1:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8"
./app/job/bbq/comment/configs/mysql.toml:       readDSN = ["{user}:{password}@tcp(127.0.0.2:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8","{user}:{password}@tcp(127.0.0.3:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8,utf8mb4"]
./app/job/bbq/video/cmd/test.toml:password = "l"
./app/job/bbq/video/cmd/test.toml: password = "MhxzKhl"
./app/job/main/aegis/cmd/aegis-job.toml:    password = "a1654OQigEsyHz2I"
./app/job/main/archive/cmd/archive-job-example.toml:password = "2333"
./app/job/main/archive/cmd/archive-job-test.toml:password = "2333"
./app/job/main/archive-shjd/cmd/archive-job-example.toml:password = "2333"
./app/job/main/growup/cmd/growup-job.toml:    password = "2233"
./app/job/main/mcn/cmd/mcn-job-test.toml:    password = "123"
./app/job/main/sms/dao/chuanglan/client.go:     params["password"] = v.conf.ChuangLanSmsPwd
./app/job/main/sms/dao/chuanglan/client.go:     params["password"] = v.conf.ChuangLanActPwd
./app/job/main/sms/dao/chuanglan/client.go:     params["password"] = v.conf.ChuangLanInternationPwd
./app/job/main/sms/dao/chuanglan/client.go:     params["password"] = pwd
./app/job/main/sms/dao/chuanglan/client.go:     params["password"] = v.conf.ChuangLanInternationPwd
./app/job/main/up/cmd/up-job.toml:    password = "123"
./app/job/main/videoup-report/cmd/videoup-report-job.toml:    password = "2333"
./app/service/bbq/cms/configs/mysql.toml:       dsn = "{user}:{password}@tcp(127.0.0.1:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8"
./app/service/bbq/cms/configs/mysql.toml:       readDSN = ["{user}:{password}@tcp(127.0.0.2:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8","{user}:{password}@tcp(127.0.0.3:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8,utf8mb4"]
./app/service/bbq/comment/configs/mysql.toml:   dsn = "{user}:{password}@tcp(127.0.0.1:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8"
./app/service/bbq/comment/configs/mysql.toml:   readDSN = ["{user}:{password}@tcp(127.0.0.2:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8","{user}:{password}@tcp(127.0.0.3:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8,utf8mb4"]
./app/service/ep/footman/cmd/tapd.toml:password = ""
./app/service/ep/footman/dao/bugly.py:password = '61241623FYFzwq'
./app/service/ep/footman/dao/bugly.py:    driver.find_element_by_id("p").send_keys(password)
./app/service/ep/footman/dao/tapd.go:   _password    = "0989D4F0-AF9D-949F-C950-E22A3F891NIK"
./app/service/ep/footman/dao/tapd.go:   req.SetBasicAuth(_userName, _password)
./app/service/live/xroom/configs/mysql.toml:    dsn = "{user}:{password}@tcp(127.0.0.1:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8"
./app/service/live/xroom/configs/mysql.toml:    readDSN = ["{user}:{password}@tcp(127.0.0.2:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8","{user}:{password}@tcp(127.0.0.3:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8,utf8mb4"]
./app/service/live/xroom-feed/configs/mysql.toml:       dsn = "{user}:{password}@tcp(127.0.0.1:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8"
./app/service/live/xroom-feed/configs/mysql.toml:       readDSN = ["{user}:{password}@tcp(127.0.0.2:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8","{user}:{password}@tcp(127.0.0.3:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8,utf8mb4"]
./app/service/main/account-recovery/cmd/account-recovery-test.toml:    password = ""
./app/service/main/account-recovery/dao/mid_info.go:// UpdatePwd update password
./app/service/main/account-recovery/dao/mid_info.go:// UpdateBatchPwd batch update password
./app/service/main/dapper/conf/config.go:       Password string `toml:"password"`
./app/service/main/dapper-query/conf/config.go: Password string `toml:"password"`
./app/service/main/passport-game/CHANGELOG.md:> 1.fix password not matches when salt is empty
./app/service/main/passport-game/CHANGELOG.md:> 1.remove cold 30s when back to origin password error
./app/service/main/passport-game/service/passport_login.go:// pwdMatches check if password matches.
./app/service/main/passport-game/service/passport_login.go:// NOTE: since passport did not use salt in matching password in early period,
./app/service/main/passport-game/service/passport_login.go:// the schema for generating password hash in passport origin is:
./app/service/main/passport-game/service/passport_login.go:// if the salt is empty, take the result of md5Hex(plain) as password hash,
./app/service/main/passport-game/service/passport_login.go:// else take the result of fmt.Sprintf("%s>>BiLiSaLt<<%s", md5Hex(plainPwd), salt) as password hash.
./app/service/main/passport-game/service/passport_login_test.go:               Convey("password is incorrect", func() {
./app/service/main/passport-game/service/passport_login_test.go:               Convey("password is correct", func() {
./app/service/main/secure/model/log.go:// PWDlog is user change password log.
./app/tool/gdoc/swagger.go:     Flow             string            `json:"flow,omitempty" yaml:"flow,omitempty"` // Valid values are "implicit", "password", "application" or "accessCode".
./app/tool/kratos/template.go:  dsn = "{user}:{password}@tcp(127.0.0.1:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8"
./app/tool/kratos/template.go:  readDSN = ["{user}:{password}@tcp(127.0.0.2:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8mb4,utf8","{user}:{password}@tcp(127.0.0.3:3306)/{database}?timeout=1s&readTimeout=1s&writeTimeout=1s&parseTime=true&loc=Local&charset=utf8,utf8mb4"]
./build/root/go_common_job.yaml:    password: ""
./go_common_job.yaml:    password: ""
./library/cache/redis/conn.go:  password     string
./library/cache/redis/conn.go:// DialPassword specifies the password to use when connecting to
./library/cache/redis/conn.go:func DialPassword(password string) DialOption {
./library/cache/redis/conn.go:          do.password = password
./library/cache/redis/conn.go:  if do.password != "" {
./library/cache/redis/conn.go:          if _, err := c.Do("AUTH", do.password); err != nil {
./library/cache/redis/conn.go:          password, isSet := u.User.Password()
./library/cache/redis/conn.go:                  options = append(options, DialPassword(password))
./library/conf/dsn/doc.go:      network:[//[username[:password]@]address[:port][,address[:port]]][/path][?query][#fragment]
./library/conf/dsn/doc.go:      password string
./library/conf/dsn/dsn.go://    password
./library/conf/dsn/dsn.go:              password, ok := d.User.Password()
./library/conf/dsn/dsn.go:                      assignFuncs["password"] = stringsAssignFunc(password)
./library/conf/dsn/dsn_test.go: Password  string         `dsn:"password"`
./library/conf/dsn/example_test.go:     Password string         `dsn:"password" validate:"required"`
./library/log/internal/encoder.go:// included in logs (e.g., passwords).
./library/log/internal/encoder.go:// included in logs (e.g., passwords).
./library/net/http/blademaster/context.go:// If the authorization fails (ex: the password does not match), call Abort to ensure the remaining handlers
./vendor/github.com/360EntSecGroup-Skylar/excelize/xmlWorkbook.go:// When a password is to be hashed and stored in this element, it shall be
./vendor/github.com/360EntSecGroup-Skylar/excelize/xmlWorkbook.go:// there is a leading BOM character (U+FEFF) in the encoded password it is
./vendor/github.com/AlecAivazis/survey/BUILD:        "password.go",
./vendor/github.com/AlecAivazis/survey/password.go:     password := ""
./vendor/github.com/AlecAivazis/survey/password.go:     prompt := &survey.Password{ Message: "Please type your password" }
./vendor/github.com/AlecAivazis/survey/password.go:     survey.AskOne(prompt, &password, nil)
./vendor/github.com/AlecAivazis/survey/README.md:   1. [Password](#password)
./vendor/github.com/AlecAivazis/survey/README.md:password := ""
./vendor/github.com/AlecAivazis/survey/README.md:    Message: "Please type your password",
./vendor/github.com/AlecAivazis/survey/README.md:survey.AskOne(prompt, &password, nil)
./vendor/github.com/aliyun/aliyun-oss-go-sdk/oss/client.go:// AuthProxy sets the proxy information with user name and password.
./vendor/github.com/aliyun/aliyun-oss-go-sdk/oss/client.go:// proxyPassword    the proxy password.
./vendor/github.com/aliyun/aliyun-oss-go-sdk/oss/conf.go:       ProxyPassword   string      // Proxy password
./vendor/github.com/docker/docker/api/swagger.yaml:      "password": "string",
./vendor/github.com/docker/docker/api/swagger.yaml:      password:
./vendor/github.com/docker/docker/api/swagger.yaml:      password: "xxxx"
./vendor/github.com/docker/docker/api/swagger.yaml:                "password": "hunter2"
./vendor/github.com/docker/docker/api/swagger.yaml:                "password": "conta1n3rize14"
./vendor/github.com/docker/docker/api/swagger.yaml:      description: "Validate credentials for a registry and, if available, get an identity token for accessing the registry without password."
./vendor/github.com/docker/docker/api/types/auth.go:    Password string `json:"password,omitempty"`
./vendor/github.com/docker/go-connections/tlsconfig/config.go:// password when tryin to decrypt a TLS private key
./vendor/github.com/fsnotify/fsnotify/CONTRIBUTING.md:* Run `vagrant up` from the project folder. You can also setup just one box with `vagrant up linux` or `vagrant up bsd` (note: the BSD box doesn't support Windows hosts at this time, and NFS may prompt for your host OS password)
./vendor/github.com/ftp-master/client_multiline_test.go:                       proto.Writer.PrintfLine("331 Please send your password")
./vendor/github.com/ftp-master/ftp.go:// Login authenticates the client with specified user and password.
./vendor/github.com/ftp-master/ftp.go:// "anonymous"/"anonymous" is a common user/password scheme for FTP servers
./vendor/github.com/ftp-master/ftp.go:func (c *ServerConn) Login(user, password string) error {
./vendor/github.com/ftp-master/ftp.go:          _, _, err = c.cmd(StatusLoggedIn, "PASS %s", password)
./vendor/github.com/ftp-master/status.go://     StatusUserOK:             "User name okay, need password.",
./vendor/github.com/ftp-master/status.go://     StatusInvalidCredentials:       "Invalid username or password.",
./vendor/github.com/go-ego/cedar/LICENSE:source code form), and must require no special password or key for
./vendor/github.com/go-sql-driver/mysql/CHANGELOG.md: - Native password authentication plugin support (#494, #524)
./vendor/github.com/go-sql-driver/mysql/CHANGELOG.md: - Various old_password fixes
./vendor/github.com/go-sql-driver/mysql/CHANGELOG.md:  - Added *old_passwords* support: Required in some cases, but must be enabled by adding `allowOldPasswords=true` to the DSN since it is insecure
./vendor/github.com/go-sql-driver/mysql/driver.go://  db, err := sql.Open("mysql", "user:password@/dbname")
./vendor/github.com/go-sql-driver/mysql/driver.go:              // Retry with clear text password for
./vendor/github.com/go-sql-driver/mysql/dsn.go: AllowNativePasswords    bool // Allows the native password authentication method
./vendor/github.com/go-sql-driver/mysql/dsn.go: AllowOldPasswords       bool // Allows the old insecure password method
./vendor/github.com/go-sql-driver/mysql/dsn.go: // [username[:password]@]
./vendor/github.com/go-sql-driver/mysql/dsn.go: // [user[:password]@][net[(addr)]]/dbname[?param1=value1&paramN=valueN]
./vendor/github.com/go-sql-driver/mysql/dsn.go: // Find the last '/' (since the password or the net addr might contain a '/')
./vendor/github.com/go-sql-driver/mysql/dsn.go:                         // [username[:password]@][protocol[(address)]]
./vendor/github.com/go-sql-driver/mysql/dsn.go:                                // username[:password]
./vendor/github.com/go-sql-driver/mysql/dsn.go:         // Use native password authentication
./vendor/github.com/go-sql-driver/mysql/errors.go:      ErrNativePassword    = errors.New("this user requires mysql native password authentication.")
./vendor/github.com/go-sql-driver/mysql/errors.go:      ErrOldPassword       = errors.New("this user requires old password authentication. If you still want to use it, please add 'allowOldPasswords=1' to your DSN. See also https://github.com/go-sql-driver/mysql/wiki/old_passwords")
./vendor/github.com/go-sql-driver/mysql/packets.go:     // first part of the password cipher [8 bytes]
./vendor/github.com/go-sql-driver/mysql/packets.go:             // second part of the password cipher [mininum 13 bytes],
./vendor/github.com/go-sql-driver/mysql/packets.go:             // a scramble". So the second part of the password cipher is
./vendor/github.com/go-sql-driver/mysql/packets.go:     pos += copy(data[pos:], "mysql_native_password")
./vendor/github.com/go-sql-driver/mysql/packets.go:     // User password
./vendor/github.com/go-sql-driver/mysql/packets.go:     // Add the scrambled password [null terminated string]
./vendor/github.com/go-sql-driver/mysql/packets.go:     // Add the clear password [null terminated string]
./vendor/github.com/go-sql-driver/mysql/packets.go://  Native password authentication method
./vendor/github.com/go-sql-driver/mysql/packets.go:                            case "mysql_old_password":
./vendor/github.com/go-sql-driver/mysql/packets.go:                            // using old_passwords
./vendor/github.com/go-sql-driver/mysql/packets.go:                            case "mysql_clear_password":
./vendor/github.com/go-sql-driver/mysql/packets.go:                            // using clear text password
./vendor/github.com/go-sql-driver/mysql/packets.go:                            case "mysql_native_password":
./vendor/github.com/go-sql-driver/mysql/README.md:      * [Password](#password)
./vendor/github.com/go-sql-driver/mysql/README.md:db, err := sql.Open("mysql", "user:password@/dbname")
./vendor/github.com/go-sql-driver/mysql/README.md:[username[:password]@][protocol[(address)]]/dbname[?param1=value1&...&paramN=valueN]
./vendor/github.com/go-sql-driver/mysql/README.md:username:password@protocol(address)/dbname?param=value
./vendor/github.com/go-sql-driver/mysql/README.md:`allowCleartextPasswords=true` allows using the [cleartext client side plugin](http://dev.mysql.com/doc/en/cleartext-authentication-plugin.html) if required by an account, such as one defined with the [PAM authentication plugin](http://dev.mysql.com/doc/en/pam-authentication-plugin.html). Sending passwords in clear text may be a security problem in some configurations. To avoid problems if there is any possibility that the password would be intercepted, clients should connect to MySQL Server using a method that protects the password. Possibilities include [TLS / SSL](#tls), IPsec, or a private network.
./vendor/github.com/go-sql-driver/mysql/README.md:`allowNativePasswords=true` allows the usage of the mysql native password method.
./vendor/github.com/go-sql-driver/mysql/README.md:`allowOldPasswords=true` allows the usage of the insecure old password method. This should be avoided, but is necessary in some cases. See also [the old_passwords wiki page](https://github.com/go-sql-driver/mysql/wiki/old_passwords).
./vendor/github.com/go-sql-driver/mysql/README.md:user:password@tcp(localhost:5555)/dbname?tls=skip-verify&autocommit=true
./vendor/github.com/go-sql-driver/mysql/README.md:user:password@/dbname?sql_mode=TRADITIONAL
./vendor/github.com/go-sql-driver/mysql/README.md:user:password@tcp([de:ad:be:ef::ca:fe]:80)/dbname?timeout=90s&collation=utf8mb4_unicode_ci
./vendor/github.com/go-sql-driver/mysql/README.md:id:password@tcp(your-amazonaws-uri.com:3306)/dbname
./vendor/github.com/go-sql-driver/mysql/README.md:user:password@tcp/dbname?charset=utf8mb4,utf8&sys_var=esc%40ped
./vendor/github.com/go-sql-driver/mysql/README.md:user:password@/dbname
./vendor/github.com/go-sql-driver/mysql/README.md:user:password@/
./vendor/github.com/go-sql-driver/mysql/utils.go:// Encrypt password using 4.1+ method
./vendor/github.com/go-sql-driver/mysql/utils.go:func scramblePassword(scramble, password []byte) []byte {
./vendor/github.com/go-sql-driver/mysql/utils.go:       if len(password) == 0 {
./vendor/github.com/go-sql-driver/mysql/utils.go:       // stage1Hash = SHA1(password)
./vendor/github.com/go-sql-driver/mysql/utils.go:       crypt.Write(password)
./vendor/github.com/go-sql-driver/mysql/utils.go:// Encrypt password using pre 4.1 (old password) method
./vendor/github.com/go-sql-driver/mysql/utils.go:func pwHash(password []byte) (result [2]uint32) {
./vendor/github.com/go-sql-driver/mysql/utils.go:       for _, c := range password {
./vendor/github.com/go-sql-driver/mysql/utils.go:               // skip spaces and tabs in password
./vendor/github.com/go-sql-driver/mysql/utils.go:// Encrypt password using insecure pre 4.1 method
./vendor/github.com/go-sql-driver/mysql/utils.go:func scrambleOldPassword(scramble, password []byte) []byte {
./vendor/github.com/go-sql-driver/mysql/utils.go:       if len(password) == 0 {
./vendor/github.com/go-sql-driver/mysql/utils.go:       hashPw := pwHash(password)
./vendor/github.com/influxdata/influxdb/client/v2/client.go:    // Password is the influxdb password, optional.
./vendor/github.com/influxdata/influxdb/client/v2/client.go:            password:  conf.Password,
./vendor/github.com/influxdata/influxdb/client/v2/client.go:            req.SetBasicAuth(c.username, c.password)
./vendor/github.com/influxdata/influxdb/client/v2/client.go:    password   string
./vendor/github.com/influxdata/influxdb/client/v2/client.go:            req.SetBasicAuth(c.username, c.password)
./vendor/github.com/influxdata/influxdb/client/v2/client.go:            req.SetBasicAuth(c.username, c.password)
./vendor/github.com/jinzhu/gorm/main.go://       db, err := gorm.Open("mysql", "user:password@/dbname?charset=utf8&parseTime=True&loc=Local")
./vendor/github.com/julienschmidt/httprouter/README.md:         user, password, hasAuth := r.BasicAuth()
./vendor/github.com/julienschmidt/httprouter/README.md:         if hasAuth && user == requiredUser && password == requiredPassword {
./vendor/github.com/olekukonko/tablewriter/README.md:| password | varchar(100) | NO   |     | NULL    |                |
./vendor/github.com/olekukonko/tablewriter/test_info.csv:password,varchar(100),NO,,NULL,
./vendor/github.com/pelletier/go-toml/README.md:password = "mypassword"`)
./vendor/github.com/pelletier/go-toml/README.md:password := postgresConfig.Get("password").(string)
./vendor/github.com/pelletier/go-toml/README.md:Password = "mypassword"`)
./vendor/github.com/pelletier/go-toml/README.md:q, _ := query.Compile("$..[user,password]")
./vendor/github.com/prometheus/common/config/http_config.go:    Password Secret `yaml:"password"`
./vendor/github.com/prometheus/common/config/http_config.go:    password Secret
./vendor/github.com/prometheus/common/config/http_config.go:func NewBasicAuthRoundTripper(username string, password Secret, rt http.RoundTripper) http.RoundTripper {
./vendor/github.com/prometheus/common/config/http_config.go:    return &basicAuthRoundTripper{username, password, rt}
./vendor/github.com/prometheus/common/config/http_config.go:    req.SetBasicAuth(rt.username, string(rt.password))
Binary file ./vendor/github.com/prometheus/procfs/fixtures/26231/exe matches
./vendor/github.com/samuel/go-zookeeper/zk/conn.go:     // then maybe switch to something like "map[username] = password" to allow
./vendor/github.com/samuel/go-zookeeper/zk/conn.go:     // only single password for given user with users being unique.
./vendor/github.com/samuel/go-zookeeper/zk/util.go:func DigestACL(perms int32, user, password string) []ACL {
./vendor/github.com/samuel/go-zookeeper/zk/util.go:     userPass := []byte(fmt.Sprintf("%s:%s", user, password))
./vendor/github.com/Shopify/sarama/config.go:                   //username and password for SASL/PLAIN authentication
./vendor/github.com/Shopify/sarama/config.go:                   Logger.Println("Net.SASL is disabled but a non-empty password was provided.")
./vendor/github.com/siddontang/go-mysql/canal/config.go:        Password string `toml:"password"`
./vendor/github.com/siddontang/go-mysql/client/auth.go: auth := CalcPassword(c.salt, []byte(c.password))
./vendor/github.com/siddontang/go-mysql/client/auth.go: // mysql_native_password + null-terminated
./vendor/github.com/siddontang/go-mysql/client/auth.go: pos += copy(data[pos:], "mysql_native_password")
./vendor/github.com/siddontang/go-mysql/client/conn.go: password  string
./vendor/github.com/siddontang/go-mysql/client/conn.go:func Connect(addr string, user string, password string, dbName string, options ...func(*Conn)) (*Conn, error) {
./vendor/github.com/siddontang/go-mysql/client/conn.go: c.password = password
./vendor/github.com/siddontang/go-mysql/dump/dump.go:func NewDumper(executionPath string, addr string, user string, password string) (*Dumper, error) {
./vendor/github.com/siddontang/go-mysql/dump/dump.go:   d.Password = password
./vendor/github.com/siddontang/go-mysql/dump/dump.go:   args = append(args, fmt.Sprintf("--password=%s", d.Password))
./vendor/github.com/siddontang/go-mysql/mysql/const.go: AUTH_NAME                     = "mysql_native_password"
./vendor/github.com/siddontang/go-mysql/mysql/errname.go:       ER_ACCESS_DENIED_ERROR:                           "Access denied for user '%-.48s'@'%-.64s' (using password: %s)",
./vendor/github.com/siddontang/go-mysql/mysql/errname.go:       ER_PASSWORD_ANONYMOUS_USER:                       "You are using MySQL as an anonymous user and anonymous users are not allowed to change passwords",
./vendor/github.com/siddontang/go-mysql/mysql/errname.go:       ER_PASSWORD_NOT_ALLOWED:                          "You must have privileges to update tables in the mysql database to be able to change passwords for others",
./vendor/github.com/siddontang/go-mysql/mysql/errname.go:       ER_SERVER_IS_IN_SECURE_AUTH_MODE:                 "Server is running in --secure-auth mode, but '%s'@'%s' has a password in the old format; please change the password to the new format",
./vendor/github.com/siddontang/go-mysql/mysql/errname.go:       ER_INSECURE_PLAIN_TEXT:                                              "Sending passwords in plain text without SSL/TLS is extremely insecure.",
./vendor/github.com/siddontang/go-mysql/mysql/errname.go:       ER_INSECURE_CHANGE_MASTER:                                           "Storing MySQL user name or password information in the master.info repository is not secure and is therefore not recommended. Please see the MySQL Manual for more about this issue and possible alternatives.",
./vendor/github.com/siddontang/go-mysql/mysql/errname.go:       ER_NOT_VALID_PASSWORD:                                               "Your password does not satisfy the current policy requirements",
./vendor/github.com/siddontang/go-mysql/mysql/errname.go:       ER_PASSWORD_FORMAT:                                                  "The password hash doesn't have the expected format. Check if the correct password algorithm is being used with the PASSWORD() function.",
./vendor/github.com/siddontang/go-mysql/mysql/errname.go:       ER_MUST_CHANGE_PASSWORD_LOGIN:                                       "Your password has expired. To log in you must change it using a client that supports expired passwords.",
./vendor/github.com/siddontang/go-mysql/mysql/util.go:func CalcPassword(scramble, password []byte) []byte {
./vendor/github.com/siddontang/go-mysql/mysql/util.go:  if len(password) == 0 {
./vendor/github.com/siddontang/go-mysql/mysql/util.go:  // stage1Hash = SHA1(password)
./vendor/github.com/siddontang/go-mysql/mysql/util.go:  crypt.Write(password)
./vendor/github.com/siddontang/go-mysql/replication/binlogsyncer.go:    // Password is for MySQL password.
./vendor/github.com/tsuna/gohbase/pb/Authentication.pb.go:      Password         []byte `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
./vendor/github.com/tsuna/gohbase/pb/Authentication.proto:    optional bytes password = 2;
./vendor/github.com/urfave/cli/README.md:  "output": "password for the mysql database"
./vendor/github.com/urfave/cli/README.md:      Name: "password, p",
./vendor/github.com/urfave/cli/README.md:      Usage: "password for the mysql database",
./vendor/github.com/urfave/cli/README.md:      FilePath: "/etc/mysql/password",
./vendor/github.com/vjeantet/grok/patterns/bro:BRO_HTTP %{NUMBER:ts}\t%{NOTSPACE:uid}\t%{IP:orig_h}\t%{INT:orig_p}\t%{IP:resp_h}\t%{INT:resp_p}\t%{INT:trans_depth}\t%{GREEDYDATA:method}\t%{GREEDYDATA:domain}\t%{GREEDYDATA:uri}\t%{GREEDYDATA:referrer}\t%{GREEDYDATA:user_agent}\t%{NUMBER:request_body_len}\t%{NUMBER:response_body_len}\t%{GREEDYDATA:status_code}\t%{GREEDYDATA:status_msg}\t%{GREEDYDATA:info_code}\t%{GREEDYDATA:info_msg}\t%{GREEDYDATA:filename}\t%{GREEDYDATA:bro_tags}\t%{GREEDYDATA:username}\t%{GREEDYDATA:password}\t%{GREEDYDATA:proxied}\t%{GREEDYDATA:orig_fuids}\t%{GREEDYDATA:orig_mime_types}\t%{GREEDYDATA:resp_fuids}\t%{GREEDYDATA:resp_mime_types}
./vendor/github.com/xanzy/go-gitlab/gitlab.go:  // Username and password used for basix authentication.
./vendor/github.com/xanzy/go-gitlab/gitlab.go:  username, password string
./vendor/github.com/xanzy/go-gitlab/gitlab.go:// authentication, provide a valid username and password.
./vendor/github.com/xanzy/go-gitlab/gitlab.go:func NewBasicAuthClient(httpClient *http.Client, endpoint, username, password string) (*Client, error) {
./vendor/github.com/xanzy/go-gitlab/gitlab.go:  client.password = password
./vendor/github.com/xanzy/go-gitlab/gitlab.go:  t, err := config.PasswordCredentialsToken(ctx, c.username, c.password)
./vendor/github.com/xanzy/go-gitlab/services.go:        Password              *string `url:"password,omitempty" json:"password,omitempty" `
./vendor/github.com/xanzy/go-gitlab/services.go:        Password    *string `url:"password,omitempty" json:"password,omitempty"`
./vendor/github.com/xanzy/go-gitlab/settings.go:        PasswordAuthenticationEnabledForWeb bool              `json:"password_authentication_enabled_for_web"`
./vendor/github.com/xanzy/go-gitlab/settings.go:        PasswordAuthenticationEnabledForGit bool              `json:"password_authentication_enabled_for_git"`
./vendor/github.com/xanzy/go-gitlab/settings.go:        PasswordAuthenticationEnabledForWeb *bool             `url:"password_authentication_enabled_for_web,omitempty" json:"password_authentication_enabled_for_web,omitempty"`
./vendor/github.com/xanzy/go-gitlab/settings.go:        PasswordAuthenticationEnabledForGit *bool             `url:"password_authentication_enabled_for_git,omitempty" json:"password_authentication_enabled_for_git,omitempty"`
./vendor/github.com/xanzy/go-gitlab/users.go:   Password         *string `url:"password,omitempty" json:"password,omitempty"`
./vendor/github.com/xanzy/go-gitlab/users.go:   ResetPassword    *bool   `url:"reset_password,omitempty" json:"reset_password,omitempty"`
./vendor/github.com/xanzy/go-gitlab/users.go:   Password           *string `url:"password,omitempty" json:"password,omitempty"`
./vendor/golang.org/x/crypto/ssh/client_auth.go:// passwordCallback is an AuthMethod that fetches the password through
./vendor/golang.org/x/crypto/ssh/client_auth.go:type passwordCallback func() (password string, err error)
./vendor/golang.org/x/crypto/ssh/client_auth.go:func (cb passwordCallback) auth(session []byte, user string, c packetConn, rand io.Reader) (bool, []string, error) {
./vendor/golang.org/x/crypto/ssh/client_auth.go:        type passwordAuthMsg struct {
./vendor/golang.org/x/crypto/ssh/client_auth.go:        // REVIEW NOTE: is there a need to support skipping a password attempt?
./vendor/golang.org/x/crypto/ssh/client_auth.go:        // The program may only find out that the user doesn't have a password
./vendor/golang.org/x/crypto/ssh/client_auth.go:        if err := c.writePacket(Marshal(&passwordAuthMsg{
./vendor/golang.org/x/crypto/ssh/client_auth.go:func (cb passwordCallback) method() string {
./vendor/golang.org/x/crypto/ssh/client_auth.go:        return "password"
./vendor/golang.org/x/crypto/ssh/client_auth.go:// Password returns an AuthMethod using the given password.
./vendor/golang.org/x/crypto/ssh/client_auth.go:        return passwordCallback(func() (string, error) { return secret, nil })
./vendor/golang.org/x/crypto/ssh/client_auth.go:// fetching a password.
./vendor/golang.org/x/crypto/ssh/client_auth.go:        return passwordCallback(prompt)
./vendor/golang.org/x/crypto/ssh/client_auth.go:// disabling echoing (e.g. for passwords), and return all the answers.
./vendor/golang.org/x/crypto/ssh/client_auth.go:// SSH_MSG_USERAUTH_FAILURE (rfc4252 #8 [password] and rfc4256 #3.4
./vendor/golang.org/x/crypto/ssh/server.go:     // attempts to authenticate using a password.
./vendor/golang.org/x/crypto/ssh/server.go:     PasswordCallback func(conn ConnMetadata, password []byte) (*Permissions, error)
./vendor/golang.org/x/crypto/ssh/server.go:             case "password":
./vendor/golang.org/x/crypto/ssh/server.go:                             authErr = errors.New("ssh: password auth not configured")
./vendor/golang.org/x/crypto/ssh/server.go:                     password, payload, ok := parseString(payload)
./vendor/golang.org/x/crypto/ssh/server.go:                     perms, authErr = config.PasswordCallback(s, password)
./vendor/golang.org/x/crypto/ssh/server.go:                     failureMsg.Methods = append(failureMsg.Methods, "password")
./vendor/golang.org/x/crypto/ssh/terminal/terminal.go:// ReadPassword temporarily changes the prompt and reads a password, without
./vendor/golang.org/x/crypto/ssh/terminal/terminal.go:                         // remove \r from passwords on Windows
./vendor/golang.org/x/crypto/ssh/terminal/util.go:// passwordReader is an io.Reader that reads from a specific file descriptor.
./vendor/golang.org/x/crypto/ssh/terminal/util.go:type passwordReader int
./vendor/golang.org/x/crypto/ssh/terminal/util.go:func (r passwordReader) Read(buf []byte) (int, error) {
./vendor/golang.org/x/crypto/ssh/terminal/util.go:// is commonly used for inputting passwords and other sensitive data. The slice
./vendor/golang.org/x/crypto/ssh/terminal/util.go:      return readPasswordLine(passwordReader(fd))
./vendor/golang.org/x/crypto/ssh/terminal/util_plan9.go:// is commonly used for inputting passwords and other sensitive data. The slice
./vendor/golang.org/x/crypto/ssh/terminal/util_solaris.go:// is commonly used for inputting passwords and other sensitive data. The slice
./vendor/golang.org/x/crypto/ssh/terminal/util_windows.go:// passwordReader is an io.Reader that reads from a specific Windows HANDLE.
./vendor/golang.org/x/crypto/ssh/terminal/util_windows.go:type passwordReader int
./vendor/golang.org/x/crypto/ssh/terminal/util_windows.go:func (r passwordReader) Read(buf []byte) (int, error) {
./vendor/golang.org/x/crypto/ssh/terminal/util_windows.go:// is commonly used for inputting passwords and other sensitive data. The slice
./vendor/golang.org/x/crypto/ssh/terminal/util_windows.go:      return readPasswordLine(passwordReader(fd))
./vendor/golang.org/x/net/proxy/socks5.go:// with an optional username and password. See RFC 1928.
./vendor/golang.org/x/net/proxy/socks5.go:              s.password = auth.Password
./vendor/golang.org/x/net/proxy/socks5.go:      user, password string
./vendor/golang.org/x/net/proxy/socks5.go:      if len(s.user) > 0 && len(s.user) < 256 && len(s.password) < 256 {
./vendor/golang.org/x/net/proxy/socks5.go:              buf = append(buf, 1 /* password protocol version */)
./vendor/golang.org/x/net/proxy/socks5.go:              buf = append(buf, uint8(len(s.password)))
./vendor/golang.org/x/net/proxy/socks5.go:              buf = append(buf, s.password...)
./vendor/golang.org/x/net/proxy/socks5.go:                      return errors.New("proxy: SOCKS5 proxy at " + s.addr + " rejected username/password")
./vendor/golang.org/x/oauth2/oauth2.go:// PasswordCredentialsToken converts a resource owner username and password
./vendor/golang.org/x/oauth2/oauth2.go:func (c *Config) PasswordCredentialsToken(ctx context.Context, username, password string) (*Token, error) {
./vendor/golang.org/x/oauth2/oauth2.go:         "grant_type": {"password"},
./vendor/golang.org/x/oauth2/oauth2.go:         "password":   {password},
./vendor/golang.org/x/sys/windows/service.go://sys      CreateService(mgr Handle, serviceName *uint16, displayName *uint16, access uint32, srvType uint32, startType uint32, errCtl uint32, pathName *uint16, loadOrderGroup *uint16, tagId *uint32, dependencies *uint16, serviceStartName *uint16, password *uint16) (handle Handle, err error) [failretval==0] = advapi32.CreateServiceW
./vendor/golang.org/x/sys/windows/service.go://sys      ChangeServiceConfig(service Handle, serviceType uint32, startType uint32, errorControl uint32, binaryPathName *uint16, loadOrderGroup *uint16, tagId *uint32, dependencies *uint16, serviceStartName *uint16, password *uint16, displayName *uint16) (err error) = advapi32.ChangeServiceConfigW
./vendor/golang.org/x/sys/windows/zsyscall_windows.go:func CreateService(mgr Handle, serviceName *uint16, displayName *uint16, access uint32, srvType uint32, startType uint32, errCtl uint32, pathName *uint16, loadOrderGroup *uint16, tagId *uint32, dependencies *uint16, serviceStartName *uint16, password *uint16) (handle Handle, err error) {
./vendor/golang.org/x/sys/windows/zsyscall_windows.go:  r0, _, e1 := syscall.Syscall15(procCreateServiceW.Addr(), 13, uintptr(mgr), uintptr(unsafe.Pointer(serviceName)), uintptr(unsafe.Pointer(displayName)), uintptr(access), uintptr(srvType), uintptr(startType), uintptr(errCtl), uintptr(unsafe.Pointer(pathName)), uintptr(unsafe.Pointer(loadOrderGroup)), uintptr(unsafe.Pointer(tagId)), uintptr(unsafe.Pointer(dependencies)), uintptr(unsafe.Pointer(serviceStartName)), uintptr(unsafe.Pointer(password)), 0, 0)
./vendor/golang.org/x/sys/windows/zsyscall_windows.go:func ChangeServiceConfig(service Handle, serviceType uint32, startType uint32, errorControl uint32, binaryPathName *uint16, loadOrderGroup *uint16, tagId *uint32, dependencies *uint16, serviceStartName *uint16, password *uint16, displayName *uint16) (err error) {
./vendor/golang.org/x/sys/windows/zsyscall_windows.go:  r1, _, e1 := syscall.Syscall12(procChangeServiceConfigW.Addr(), 11, uintptr(service), uintptr(serviceType), uintptr(startType), uintptr(errorControl), uintptr(unsafe.Pointer(binaryPathName)), uintptr(unsafe.Pointer(loadOrderGroup)), uintptr(unsafe.Pointer(tagId)), uintptr(unsafe.Pointer(dependencies)), uintptr(unsafe.Pointer(serviceStartName)), uintptr(unsafe.Pointer(password)), uintptr(unsafe.Pointer(displayName)), 0)
./vendor/google.golang.org/grpc/proxy.go:func basicAuth(username, password string) string {
./vendor/google.golang.org/grpc/proxy.go:       auth := username + ":" + password
./vendor/google.golang.org/grpc/proxy_test.go:          password = "notAPassword"
./vendor/google.golang.org/grpc/proxy_test.go:                  in.User = url.UserPassword(user, password)
./vendor/google.golang.org/grpc/proxy_test.go:                  wantProxyAuthStr := "Basic " + base64.StdEncoding.EncodeToString([]byte(user+":"+password))
./vendor/gopkg.in/go-playground/validator.v9/doc.go:    validate.FieldWithValue(password, confirmpassword, "eqfield")
./vendor/gopkg.in/gomail.v2/auth.go:    password string
./vendor/gopkg.in/gomail.v2/auth.go:            return []byte(a.password), nil
./vendor/gopkg.in/gomail.v2/smtp.go:    // Password is the password to use to authenticate to the SMTP server.
./vendor/gopkg.in/gomail.v2/smtp.go:func NewDialer(host string, port int, username, password string) *Dialer {
./vendor/gopkg.in/gomail.v2/smtp.go:            Password: password,
./vendor/gopkg.in/gomail.v2/smtp.go:func NewPlainDialer(host string, port int, username, password string) *Dialer {
./vendor/gopkg.in/gomail.v2/smtp.go:    return NewDialer(host, port, username, password)
./vendor/gopkg.in/gomail.v2/smtp.go:                                    password: d.Password,
./vendor/gopkg.in/olivere/elastic.v5/client.go: basicAuthPassword         string          // password for HTTP Basic Auth
./vendor/gopkg.in/olivere/elastic.v5/client.go:func SetBasicAuth(username, password string) ClientOptionFunc {
./vendor/gopkg.in/olivere/elastic.v5/client.go:         c.basicAuthPassword = password
./vendor/gopkg.in/olivere/elastic.v5/client_test.go:            t.Errorf("expected no basic auth password; got: %q", client.basicAuthUsername)
./vendor/gopkg.in/olivere/elastic.v5/client_test.go:            t.Errorf("expected basic auth password %q; got: %q", want, got)
./vendor/gopkg.in/olivere/elastic.v5/client_test.go:            t.Errorf("expected basic auth password %q; got: %q", want, got)
./vendor/gopkg.in/olivere/elastic.v5/client_test.go:            t.Errorf("expected no basic auth password; got: %q", client.basicAuthUsername)
./vendor/gopkg.in/olivere/elastic.v5/reindex.go:        password       string
./vendor/gopkg.in/olivere/elastic.v5/reindex.go:// Password sets the password to authenticate with the remote cluster.
./vendor/gopkg.in/olivere/elastic.v5/reindex.go:func (ri *ReindexRemoteInfo) Password(password string) *ReindexRemoteInfo {
./vendor/gopkg.in/olivere/elastic.v5/reindex.go:        ri.password = password
./vendor/gopkg.in/olivere/elastic.v5/reindex.go:        if len(ri.password) > 0 {
./vendor/gopkg.in/olivere/elastic.v5/reindex.go:                res["password"] = ri.password
./vendor/gopkg.in/olivere/elastic.v5/reindex_test.go:   want := `{"dest":{"index":"new_twitter"},"source":{"index":"twitter","remote":{"connect_timeout":"10s","host":"http://otherhost:9200","password":"secret","socket_timeout":"1m","username":"alice"}}}`
./vendor/gopkg.in/olivere/elastic.v5/request.go:func (r *Request) SetBasicAuth(username, password string) {
./vendor/gopkg.in/olivere/elastic.v5/request.go:        ((*http.Request)(r)).SetBasicAuth(username, password)
./vendor/k8s.io/api/core/v1/types.go:   // - Secret.Data["password"] - password or token needed for authentication
./vendor/k8s.io/api/core/v1/types.go:   // BasicAuthPasswordKey is the key of the password or token for SecretTypeBasicAuth secrets
./vendor/k8s.io/api/core/v1/types.go:   BasicAuthPasswordKey = "password"
./vendor/k8s.io/client-go/rest/config.go:// AnonymousClientConfig returns a copy of the given config with all user credentials (cert/key, bearer token, and username/password) removed
./vendor/k8s.io/client-go/tools/clientcmd/api/types.go: // Password is the password for basic authentication to the kubernetes cluster.
./vendor/k8s.io/client-go/tools/clientcmd/api/types.go: Password string `json:"password,omitempty"`
./vendor/k8s.io/client-go/transport/config.go:  // Username and password for basic authentication
./vendor/k8s.io/client-go/transport/round_trippers.go:          return nil, fmt.Errorf("username/password or bearer token may be set, but not both")
./vendor/k8s.io/client-go/transport/round_trippers.go:  password string
./vendor/k8s.io/client-go/transport/round_trippers.go:func NewBasicAuthRoundTripper(username, password string, rt http.RoundTripper) http.RoundTripper {
./vendor/k8s.io/client-go/transport/round_trippers.go:  return &basicAuthRoundTripper{username, password, rt}
./vendor/k8s.io/client-go/transport/round_trippers.go:  req.SetBasicAuth(rt.username, rt.password)
./vendor/k8s.io/test-infra/prow/config/build_status.go: Password    string        `json:"password, omitempty"`


